/**********************
**Author:Abdelrahman**
**********************/

#include <time.h>
//#include <sys/types.h>
//#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include<string.h>

typedef unsigned long long uint64_t;

const unsigned char WORDFILTER = 0xF;


void transpose(uint64_t *out15,uint64_t *out14,uint64_t *out13,uint64_t *out12,uint64_t *out11,uint64_t *out10,uint64_t *out9,uint64_t *out8,uint64_t *out7,uint64_t *out6,uint64_t *out5,uint64_t *out4,uint64_t *out3,uint64_t *out2,uint64_t *out1,uint64_t *out0, uint64_t in0, uint64_t in1,uint64_t in2, uint64_t in3, uint64_t in4, uint64_t in5, uint64_t in6, uint64_t in7, uint64_t in8, uint64_t in9, uint64_t in10, uint64_t in11, uint64_t in12, uint64_t in13, uint64_t in14, uint64_t in15) {

    *out15 = 0;
    *out14 = 0;
    *out13 = 0;
    *out12 = 0;
    *out11 = 0;
    *out10 = 0;
    *out9 = 0;
    *out8 = 0;
    *out7 = 0;
    *out6 = 0;
    *out5 = 0;
    *out4 = 0;
    *out3 = 0;
    *out2 = 0;
    *out1 = 0;
    *out0 = 0;

*out15=(in0 & 0xF000000000000000)|((in1 & 0xF000000000000000)>>4*1)|((in2 & 0xF000000000000000)>>4*2) | ((in3 & 0xF000000000000000)>>4*3)|((in4 & 0xF000000000000000)>>4*4)| ((in5 & 0xF000000000000000)>>4*5) | ((in6 & 0xF000000000000000)>>4*6)|((in7 & 0xF000000000000000)>>4*7)|((in8 & 0xF000000000000000)>>4*8)|((in9 & 0xF000000000000000)>>4*9)|((in10 & 0xF000000000000000)>>4*10)| ((in11 & 0xF000000000000000)>>4*11)|((in12 & 0xF000000000000000)>>4*12)|((in13 & 0xF000000000000000)>>4*13)|((in14 & 0xF000000000000000)>>4*14)|((in15 & 0xF000000000000000)>>4*15);
*out14=((in0 & 0x0F00000000000000)<<4)|((in1 & 0x0F00000000000000))|((in2 & 0x0F00000000000000)>>4*1) | ((in3 & 0x0F00000000000000)>>4*2)|((in4 & 0x0F00000000000000)>>4*3)| ((in5 & 0x0F00000000000000)>>4*4) | ((in6 & 0x0F00000000000000)>>4*5)|((in7 & 0x0F00000000000000)>>4*6)|((in8 & 0x0F00000000000000)>>4*7)|((in9 & 0x0F00000000000000)>>4*8)|((in10 & 0x0F00000000000000)>>4*9)| ((in11 & 0x0F00000000000000)>>4*10)|((in12 & 0x0F00000000000000)>>4*11)|((in13 & 0x0F00000000000000)>>4*12)|((in14 & 0x0F00000000000000)>>4*13)|((in15 & 0x0F00000000000000)>>4*14);
*out13=((in0 & 0x00F0000000000000)<<4*2)|((in1 & 0x00F0000000000000)<<4*1)|((in2 & 0x00F0000000000000)) | ((in3 & 0x00F0000000000000)>>4*1)|((in4 & 0x00F0000000000000)>>4*2)| ((in5 & 0x00F0000000000000)>>4*3) | ((in6 & 0x00F0000000000000)>>4*4)|((in7 & 0x00F0000000000000)>>4*5)|((in8 & 0x00F0000000000000)>>4*6)|((in9 & 0x00F0000000000000)>>4*7)|((in10 & 0x00F0000000000000)>>4*8)| ((in11 & 0x00F0000000000000)>>4*9)|((in12 & 0x00F0000000000000)>>4*10)|((in13 & 0x00F0000000000000)>>4*11)|((in14 & 0x00F0000000000000)>>4*12)|((in15 & 0x00F0000000000000)>>4*13);
*out12=((in0 & 0x000F000000000000)<<4*3)|((in1 & 0x000F000000000000)<<4*2)|((in2 & 0x000F000000000000)<<4*1) | ((in3 & 0x000F000000000000))|((in4 & 0x000F000000000000)>>4*1)| ((in5 & 0x000F000000000000)>>4*2) | ((in6 & 0x000F000000000000)>>4*3)|((in7 & 0x000F000000000000)>>4*4)|((in8 & 0x000F000000000000)>>4*5)|((in9 & 0x000F000000000000)>>4*6)|((in10 & 0x000F000000000000)>>4*7)| ((in11 & 0x000F000000000000)>>4*8)|((in12 & 0x000F000000000000)>>4*9)|((in13 & 0x000F000000000000)>>4*10)|((in14 & 0x000F000000000000)>>4*11)|((in15 & 0x000F000000000000)>>4*12);
*out11=((in0 & 0x0000F00000000000)<<4*4)|((in1 & 0x0000F00000000000)<<4*3)|((in2 & 0x0000F00000000000)<<4*2) | ((in3 & 0x0000F00000000000)<<4*1)|((in4 & 0x0000F00000000000))| ((in5 & 0x0000F00000000000)>>4*1) | ((in6 & 0x0000F00000000000)>>4*2)|((in7 & 0x0000F00000000000)>>4*3)|((in8 & 0x0000F00000000000)>>4*4)|((in9 & 0x0000F00000000000)>>4*5)|((in10 & 0x0000F00000000000)>>4*6)| ((in11 & 0x0000F00000000000)>>4*7)|((in12 & 0x0000F00000000000)>>4*8)|((in13 & 0x0000F00000000000)>>4*9)|((in14 & 0x0000F00000000000)>>4*10)|((in15 & 0x0000F00000000000)>>4*11);
*out10=((in0 & 0x00000F0000000000)<<4*5)|((in1 & 0x00000F0000000000)<<4*4)|((in2 & 0x00000F0000000000)<<4*3) | ((in3 & 0x00000F0000000000)<<4*2)|((in4 & 0x00000F0000000000)<<4*1)| ((in5 & 0x00000F0000000000)) | ((in6 & 0x00000F0000000000)>>4*1)|((in7 & 0x00000F0000000000)>>4*2)|((in8 & 0x00000F0000000000)>>4*3)|((in9 & 0x00000F0000000000)>>4*4)|((in10 & 0x00000F0000000000)>>4*5)| ((in11 & 0x00000F0000000000)>>4*6)|((in12 & 0x00000F0000000000)>>4*7)|((in13 & 0x00000F0000000000)>>4*8)|((in14 & 0x00000F0000000000)>>4*9)|((in15 & 0x00000F0000000000)>>4*10);
*out9=((in0 & 0x000000F000000000)<<4*6)|((in1 & 0x000000F000000000)<<4*5)|((in2 & 0x000000F000000000)<<4*4) | ((in3 & 0x000000F000000000)<<4*3)|((in4 & 0x000000F000000000)<<4*2)| ((in5 & 0x000000F000000000)<<4*1) | ((in6 & 0x000000F000000000))|((in7 & 0x00000F000000000)>>4*1)|((in8 & 0x000000F000000000)>>4*2)|((in9 & 0x000000F000000000)>>4*3)|((in10 & 0x000000F000000000)>>4*4)| ((in11 & 0x000000F000000000)>>4*5)|((in12 & 0x000000F000000000)>>4*6)|((in13 & 0x000000F000000000)>>4*7)|((in14 & 0x000000F000000000)>>4*8)|((in15 & 0x000000F000000000)>>4*9);
*out8=((in0 & 0x0000000F00000000)<<4*7)|((in1 & 0x0000000F00000000)<<4*6)|((in2 & 0x0000000F00000000)<<4*5) | ((in3 & 0x0000000F00000000)<<4*4)|((in4 & 0x0000000F00000000)<<4*3)| ((in5 & 0x0000000F00000000)<<4*2) | ((in6 & 0x0000000F00000000)<<4*1)|((in7 & 0x0000000F00000000))|((in8 & 0x0000000F00000000)>>4*1)|((in9 & 0x0000000F00000000)>>4*2)|((in10 & 0x0000000F00000000)>>4*3)| ((in11 & 0x0000000F00000000)>>4*4)|((in12 & 0x0000000F00000000)>>4*5)|((in13 & 0x0000000F00000000)>>4*6)|((in14 & 0x0000000F00000000)>>4*7)|((in15 & 0x0000000F00000000)>>4*8);
*out7=((in0 & 0x00000000F0000000)<<4*8)|((in1 & 0x00000000F0000000)<<4*7)|((in2 & 0x00000000F0000000)<<4*6) | ((in3 & 0x00000000F0000000)<<4*5)|((in4 & 0x00000000F0000000)<<4*4)| ((in5 & 0x00000000F0000000)<<4*3) | ((in6 & 0x00000000F0000000)<<4*2)|((in7 & 0x00000000F0000000)<<4*1)|((in8 & 0x00000000F0000000))|((in9 & 0x00000000F0000000)>>4*1)|((in10 & 0x00000000F0000000)>>4*2)| ((in11 & 0x00000000F0000000)>>4*3)|((in12 & 0x00000000F0000000)>>4*4)|((in13 & 0x00000000F0000000)>>4*5)|((in14 & 0x00000000F0000000)>>4*6)|((in15 & 0x00000000F0000000)>>4*7);
*out6=((in0 & 0x000000000F000000)<<4*9)|((in1 & 0x000000000F000000)<<4*8)|((in2 & 0x000000000F000000)<<4*7) | ((in3 & 0x000000000F000000)<<4*6)|((in4 & 0x000000000F000000)<<4*5)| ((in5 & 0x000000000F000000)<<4*4) | ((in6 & 0x000000000F000000)<<4*3)|((in7 & 0x000000000F000000)<<4*2)|((in8 & 0x000000000F000000)<<4*1)|((in9 & 0x000000000F000000))|((in10 & 0x000000000F000000)>>4*1)| ((in11 & 0x000000000F000000)>>4*2)|((in12 & 0x000000000F000000)>>4*3)|((in13 & 0x000000000F000000)>>4*4)|((in14 & 0x000000000F000000)>>4*5)|((in15 & 0x000000000F000000)>>4*6);
*out5=((in0 & 0x0000000000F00000)<<4*10)|((in1 & 0x0000000000F00000)<<4*9)|((in2 & 0x0000000000F00000)<<4*8) | ((in3 & 0x0000000000F00000)<<4*7)|((in4 & 0x0000000000F00000)<<4*6)| ((in5 & 0x0000000000F00000)<<4*5) | ((in6 & 0x0000000000F00000)<<4*4)|((in7 & 0x0000000000F00000)<<4*3)|((in8 & 0x0000000000F00000)<<4*2)|((in9 & 0x0000000000F00000)<<4*1)|((in10 & 0x0000000000F00000))| ((in11 & 0x0000000000F00000)>>4*1)|((in12 & 0x0000000000F00000)>>4*2)|((in13 & 0x0000000000F00000)>>4*3)|((in14 & 0x0000000000F00000)>>4*4)|((in15 & 0x0000000000F00000)>>4*5);
*out4=((in0 & 0x00000000000F0000)<<4*11)|((in1 & 0x00000000000F0000)<<4*10)|((in2 & 0x00000000000F0000)<<4*9) | ((in3 & 0x00000000000F0000)<<4*8)|((in4 & 0x00000000000F0000)<<4*7)| ((in5 & 0x00000000000F0000)<<4*6) | ((in6 & 0x00000000000F0000)<<4*5)|((in7 & 0x00000000000F0000)<<4*4)|((in8 & 0x00000000000F0000)<<4*3)|((in9 & 0x00000000000F0000)<<4*2)|((in10 & 0x00000000000F0000)<<4*1)| ((in11 & 0x00000000000F0000))|((in12 & 0x00000000000F0000)>>4*1)|((in13 & 0x00000000000F0000)>>4*2)|((in14 & 0x00000000000F0000)>>4*3)|((in15 & 0x00000000000F0000)>>4*4);
*out3=((in0 & 0x000000000000F000)<<4*12)|((in1 & 0x000000000000F000)<<4*11)|((in2 & 0x000000000000F000)<<4*10) | ((in3 & 0x000000000000F000)<<4*9)|((in4 & 0x000000000000F000)<<4*8)| ((in5 & 0x000000000000F000)<<4*7) | ((in6 & 0x000000000000F000)<<4*6)|((in7 & 0x000000000000F000)<<4*5)|((in8 & 0x000000000000F000)<<4*4)|((in9 & 0x000000000000F000)<<4*3)|((in10 & 0x000000000000F000)<<4*2)| ((in11 & 0x000000000000F000)<<4*1)|((in12 & 0x000000000000F000))|((in13 & 0x000000000000F000)>>4*1)|((in14 & 0x000000000000F000)>>4*2)|((in15 & 0x000000000000F000)>>4*3);
*out2=((in0 & 0x0000000000000F00)<<4*13)|((in1 & 0x0000000000000F00)<<4*12)|((in2 & 0x0000000000000F00)<<4*11) | ((in3 & 0x0000000000000F00)<<4*10)|((in4 & 0x0000000000000F00)<<4*9)| ((in5 & 0x0000000000000F00)<<4*8) | ((in6 & 0x0000000000000F00)<<4*7)|((in7 & 0x0000000000000F00)<<4*6)|((in8 & 0x0000000000000F00)<<4*5)|((in9 & 0x0000000000000F00)<<4*4)|((in10 & 0x0000000000000F00)<<4*3)| ((in11 & 0x0000000000000F00)<<4*2)|((in12 & 0x0000000000000F00)<<4*1)|((in13 & 0x0000000000000F00))|((in14 & 0x0000000000000F00)>>4*1)|((in15 & 0x0000000000000F00)>>4*2);
*out1=((in0 & 0x00000000000000F0)<<4*14)|((in1 & 0x00000000000000F0)<<4*13)|((in2 & 0x00000000000000F0)<<4*12) | ((in3 & 0x00000000000000F0)<<4*11)|((in4 & 0x00000000000000F0)<<4*10)| ((in5 & 0x00000000000000F0)<<4*9) | ((in6 & 0x00000000000000F0)<<4*8)|((in7 & 0x00000000000000F0)<<4*7)|((in8 & 0x00000000000000F0)<<4*6)|((in9 & 0x00000000000000F0)<<4*5)|((in10 & 0x00000000000000F0)<<4*4)| ((in11 & 0x00000000000000F0)<<4*3)|((in12 & 0x00000000000000F0)<<4*2)|((in13 & 0x00000000000000F0)<<4*1)|((in14 & 0x00000000000000F0))|((in15 & 0x00000000000000F0)>>4*1);
*out0=((in0 & 0x000000000000000F)<<4*15)|((in1 & 0x000000000000000F)<<4*14)|((in2 & 0x000000000000000F)<<4*13) | ((in3 & 0x000000000000000F)<<4*12)|((in4 & 0x000000000000000F)<<4*11)| ((in5 & 0x000000000000000F)<<4*10) | ((in6 & 0x000000000000000F)<<4*9)|((in7 & 0x000000000000000F)<<4*8)|((in8 & 0x000000000000000F)<<4*7)|((in9 & 0x000000000000000F)<<4*6)|((in10 & 0x000000000000000F)<<4*5)| ((in11 & 0x000000000000000F)<<4*4)|((in12 & 0x000000000000000F)<<4*3)|((in13 & 0x000000000000000F)<<4*2)|((in14 & 0x000000000000000F)<<4*1)|((in15 & 0x000000000000000F));

}

const unsigned char sbox[16] = {12, 5, 6, 11, 9, 0, 10, 13, 3, 14, 15, 8, 4, 7, 1, 2};
void SubCells(uint64_t *Y)
{
	uint64_t tmp;
	uint64_t x=0;
		tmp = sbox[(*Y>>(60)) & 0xF];
		x = x  |(tmp<<(60));
		tmp = sbox[(*Y>>(56)) & 0xF];
		x = x  |(tmp<<(56));
		tmp = sbox[(*Y>>(52)) & 0xF];
		x = x  |(tmp<<(52));
		tmp = sbox[(*Y>>(48)) & 0xF];
		x = x  |(tmp<<(48));
		tmp = sbox[(*Y>>(44)) & 0xF];
		x = x  |(tmp<<(44));
		tmp = sbox[(*Y>>(40)) & 0xF];
		x = x  |(tmp<<(40));
		tmp = sbox[(*Y>>(36)) & 0xF];
		x = x  |(tmp<<(36));
		tmp = sbox[(*Y>>(32)) & 0xF];
		x = x  |(tmp<<(32));
	    tmp = sbox[(*Y>>(28)) & 0xF];
		x = x  |(tmp<<(28));
		tmp = sbox[(*Y>>(24)) & 0xF];
		x = x  |(tmp<<(24));
		tmp = sbox[(*Y>>(20)) & 0xF];
		x = x  |(tmp<<(20));
		tmp = sbox[(*Y>>(16)) & 0xF];
		x = x  |(tmp<<(16));
		tmp = sbox[(*Y>>(12)) & 0xF];
		x = x  |(tmp<<(12));
		tmp = sbox[(*Y>>(8)) & 0xF];
		x = x  |(tmp<<(8));
		tmp = sbox[(*Y>>(4)) & 0xF];
		x = x  |(tmp<<(4));
		tmp = sbox[(*Y & 0xF)];
		x = x  |(tmp);
	*Y=x;
}


void ShiftRows(uint64_t *Y3, uint64_t *Y2, uint64_t *Y1, uint64_t *Y0, int  n) {
	uint64_t tmp;
if(n==1){
	tmp = *Y3;
	*Y3 = *Y2;
	*Y2 = *Y1;
	*Y1 = *Y0;
	*Y0 = tmp;
}
if(n==2){
		tmp = *Y2;
		*Y2=*Y0;
		*Y0=tmp;
		tmp = *Y3;
		*Y3=*Y1;
		*Y1=tmp;
}
if(n==3){
	tmp = *Y0;
	*Y0=*Y1;
	*Y1=*Y2;
	*Y2=*Y3;
	*Y3=tmp;
}
}



void AddConstants(uint64_t *Y7, uint64_t *Y6, uint64_t *Y5, uint64_t *Y4,uint64_t *Y3, uint64_t *Y2, uint64_t *Y1, uint64_t *Y0, int r) {

	const uint64_t Rc3[48] = {

			0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x1111111111111111, 0x3333333333333333,
			0x7777777777777777, 0x7777777777777777, 0x7777777777777777, 0x6666666666666666, 0x5555555555555555,
			0x3333333333333333, 0x7777777777777777, 0x7777777777777777, 0x6666666666666666, 0x4444444444444444,
            0x1111111111111111, 0x3333333333333333, 0x7777777777777777, 0x6666666666666666, 0x5555555555555555,
			0x2222222222222222, 0x5555555555555555, 0x3333333333333333, 0x6666666666666666, 0x4444444444444444,
			0x0000000000000000, 0x0000000000000000, 0x1111111111111111, 0x2222222222222222, 0x5555555555555555,
			0x3333333333333333, 0x7777777777777777, 0x6666666666666666, 0x4444444444444444, 0x0000000000000000,
			0x1111111111111111, 0x3333333333333333, 0x6666666666666666, 0x5555555555555555, 0x3333333333333333,
			0x6666666666666666, 0x5555555555555555, 0x2222222222222222, 0x4444444444444444, 0x1111111111111111,
			0x2222222222222222, 0x4444444444444444, 0x0000000000000000
		};


	const uint64_t Rc[48] = {

			0x1111111111111111, 0x3333333333333333, 0x7777777777777777, 0x7777777777777777, 0x7777777777777777,
			0x6666666666666666, 0x5555555555555555, 0x3333333333333333, 0x7777777777777777, 0x7777777777777777,
			0x6666666666666666, 0x4444444444444444, 0x1111111111111111, 0x3333333333333333, 0x7777777777777777,
			0x6666666666666666, 0x5555555555555555, 0x2222222222222222, 0x5555555555555555, 0x3333333333333333,
			0x6666666666666666, 0x4444444444444444, 0x0000000000000000, 0x0000000000000000, 0x1111111111111111,
			0x2222222222222222, 0x5555555555555555, 0x3333333333333333, 0x7777777777777777, 0x6666666666666666,
			0x4444444444444444, 0x0000000000000000, 0x1111111111111111, 0x3333333333333333, 0x6666666666666666,
			0x5555555555555555, 0x3333333333333333, 0x6666666666666666, 0x5555555555555555, 0x2222222222222222,
			0x4444444444444444, 0x1111111111111111, 0x2222222222222222, 0x4444444444444444, 0x0000000000000000,
			0x1111111111111111, 0x2222222222222222, 0x4444444444444444
	};

	*Y7 = *Y7^0x4444444444444444;

	*Y5 = *Y5^0x1111111111111111;
	*Y5 = *Y5^0x4444444444444444;

	*Y3 = *Y3^0x2222222222222222;

	*Y1 =*Y1^0x3333333333333333;

	*Y6 = *Y6^Rc3[r];
	*Y4 = *Y4^Rc[r];
	*Y2 = *Y2^Rc3[r];
	*Y0 = *Y0^Rc[r];

}

const unsigned char MixColMatrix[4][4] = {
	{4,  1, 2, 2},
	{8,  6, 5, 6},
	{11,14,10, 9},
	{2,  2,15,11},
};

unsigned char FieldMult(unsigned char a, unsigned char b)
{

	const unsigned char ReductionPoly = 0x3;

	unsigned char x = a, ret = 0;

	int i;

	for(i = 0; i < 4; i++) {

		if((b>>i)&1)
			ret ^= x;


		if(x&0x8) {

			x <<= 1;

			x ^= ReductionPoly;

		}

		else x <<= 1;

	}

	return ret&WORDFILTER;

}



void MixColumn(uint64_t *Y15, uint64_t *Y14, uint64_t *Y13, uint64_t *Y12,uint64_t *Y11, uint64_t *Y10, uint64_t *Y9, uint64_t *Y8,uint64_t *Y7, uint64_t *Y6, uint64_t *Y5, uint64_t *Y4,uint64_t *Y3, uint64_t *Y2, uint64_t *Y1, uint64_t *Y0)
{

	int j;

	uint64_t tmp1;
	uint64_t tmp2;
	uint64_t tmp3;
	uint64_t tmp4;

	uint64_t sum1;
	uint64_t sum2;
	uint64_t sum3;
	uint64_t sum4;

	uint64_t W=0xF000000000000000;

	for (j=0;j<16;j++)
	{
		tmp1 = (*Y15>>(60-4*j))&0xF;
		tmp2 = (*Y11>>(60-4*j))&0xF;
		tmp3 = (*Y7>>(60-4*j))&0xF;
		tmp4 = (*Y3>>(60-4*j))&0xF;

		sum1 = FieldMult(MixColMatrix[0][0],tmp1) ^ FieldMult(MixColMatrix[0][1],tmp2)^ FieldMult(MixColMatrix[0][2],tmp3) ^ FieldMult(MixColMatrix[0][3],tmp4);
		sum2 = FieldMult(MixColMatrix[1][0],tmp1) ^ FieldMult(MixColMatrix[1][1],tmp2) ^ FieldMult(MixColMatrix[1][2],tmp3) ^FieldMult(MixColMatrix[1][3],tmp4);
		sum3 = FieldMult(MixColMatrix[2][0],tmp1) ^ FieldMult(MixColMatrix[2][1],tmp2) ^ FieldMult(MixColMatrix[2][2],tmp3) ^ FieldMult(MixColMatrix[2][3],tmp4);
		sum4 = FieldMult(MixColMatrix[3][0],tmp1) ^ FieldMult(MixColMatrix[3][1],tmp2) ^ FieldMult(MixColMatrix[3][2],tmp3) ^ FieldMult(MixColMatrix[3][3],tmp4);

		*Y15 = *Y15 & (~(W>>(4*j)));
		*Y15 = *Y15 | (sum1<<(60-4*j));
		*Y11 = *Y11 & (~(W>>(4*j)));
		*Y11 = *Y11 | (sum2<<(60-4*j));
		*Y7 = *Y7 & (~(W>>(4*j)));
		*Y7 = *Y7 | (sum3<<(60-4*j));
		*Y3 = *Y3 & (~(W>>(4*j)));
		*Y3 = *Y3 | (sum4<<(60-4*j));


		tmp1 = (*Y14>>(60-4*j))&0xF;
		tmp2 = (*Y10>>(60-4*j))&0xF;
		tmp3 = (*Y6>>(60-4*j))&0xF;
		tmp4 = (*Y2>>(60-4*j))&0xF;

		sum1 = FieldMult(MixColMatrix[0][0],tmp1) ^ FieldMult(MixColMatrix[0][1],tmp2)^ FieldMult(MixColMatrix[0][2],tmp3) ^ FieldMult(MixColMatrix[0][3],tmp4);
		sum2 = FieldMult(MixColMatrix[1][0],tmp1) ^ FieldMult(MixColMatrix[1][1],tmp2) ^ FieldMult(MixColMatrix[1][2],tmp3) ^FieldMult(MixColMatrix[1][3],tmp4);
		sum3 = FieldMult(MixColMatrix[2][0],tmp1) ^ FieldMult(MixColMatrix[2][1],tmp2) ^ FieldMult(MixColMatrix[2][2],tmp3) ^ FieldMult(MixColMatrix[2][3],tmp4);
		sum4 = FieldMult(MixColMatrix[3][0],tmp1) ^ FieldMult(MixColMatrix[3][1],tmp2) ^ FieldMult(MixColMatrix[3][2],tmp3) ^ FieldMult(MixColMatrix[3][3],tmp4);

		*Y14 = *Y14 & ~(W>>(4*j));
		*Y14 = *Y14 | (sum1<<(60-4*j));
		*Y10 = *Y10 & ~(W>>(4*j));
		*Y10 = *Y10 | (sum2<<(60-4*j));
		*Y6 = *Y6 & ~(W>>(4*j));
		*Y6 = *Y6 | (sum3<<(60-4*j));
		*Y2 = *Y2 & ~(W>>(4*j));
		*Y2 = *Y2 | (sum4<<(60-4*j));

		tmp1 = (*Y13>>(60-4*j))&0xF;
		tmp2 = (*Y9>>(60-4*j))&0xF;
		tmp3 = (*Y5>>(60-4*j))&0xF;
		tmp4 = (*Y1>>(60-4*j))&0xF;

		sum1 = FieldMult(MixColMatrix[0][0],tmp1) ^ FieldMult(MixColMatrix[0][1],tmp2)^ FieldMult(MixColMatrix[0][2],tmp3) ^ FieldMult(MixColMatrix[0][3],tmp4);
		sum2 = FieldMult(MixColMatrix[1][0],tmp1) ^ FieldMult(MixColMatrix[1][1],tmp2) ^ FieldMult(MixColMatrix[1][2],tmp3) ^FieldMult(MixColMatrix[1][3],tmp4);
		sum3 = FieldMult(MixColMatrix[2][0],tmp1) ^ FieldMult(MixColMatrix[2][1],tmp2) ^ FieldMult(MixColMatrix[2][2],tmp3) ^ FieldMult(MixColMatrix[2][3],tmp4);
		sum4 = FieldMult(MixColMatrix[3][0],tmp1) ^ FieldMult(MixColMatrix[3][1],tmp2) ^ FieldMult(MixColMatrix[3][2],tmp3) ^ FieldMult(MixColMatrix[3][3],tmp4);

		*Y13 = *Y13 & ~(W>>(4*j));
		*Y13 = *Y13 | (sum1<<(60-4*j));
		*Y9 = *Y9 & ~(W>>(4*j));
		*Y9 = *Y9 | (sum2<<(60-4*j));
		*Y5 = *Y5 & ~(W>>(4*j));
		*Y5 = *Y5 | (sum3<<(60-4*j));
		*Y1 = *Y1 & ~(W>>(4*j));
		*Y1 = *Y1 | (sum4<<(60-4*j));


		tmp1 = (*Y12>>(60-4*j))&0xF;
		tmp2 = (*Y8>>(60-4*j))&0xF;
		tmp3 = (*Y4>>(60-4*j))&0xF;
		tmp4 = (*Y0>>(60-4*j))&0xF;

	
		sum1 = FieldMult(MixColMatrix[0][0],tmp1) ^ FieldMult(MixColMatrix[0][1],tmp2)^ FieldMult(MixColMatrix[0][2],tmp3) ^ FieldMult(MixColMatrix[0][3],tmp4);
		sum2 = FieldMult(MixColMatrix[1][0],tmp1) ^ FieldMult(MixColMatrix[1][1],tmp2) ^ FieldMult(MixColMatrix[1][2],tmp3) ^FieldMult(MixColMatrix[1][3],tmp4);
		sum3 = FieldMult(MixColMatrix[2][0],tmp1) ^ FieldMult(MixColMatrix[2][1],tmp2) ^ FieldMult(MixColMatrix[2][2],tmp3) ^ FieldMult(MixColMatrix[2][3],tmp4);
		sum4 = FieldMult(MixColMatrix[3][0],tmp1) ^ FieldMult(MixColMatrix[3][1],tmp2) ^ FieldMult(MixColMatrix[3][2],tmp3) ^ FieldMult(MixColMatrix[3][3],tmp4);
		*Y12 = *Y12 & ~(W>>(4*j));
		*Y12 = *Y12 | (sum1<<(60-4*j));
		*Y8 = *Y8 & ~(W>>(4*j));
		*Y8 = *Y8 | (sum2<<(60-4*j));
		*Y4 = *Y4 & ~(W>>(4*j));
		*Y4 = *Y4 | (sum3<<(60-4*j));
		*Y0 = *Y0 & ~(W>>(4*j));
		*Y0 = *Y0 | (sum4<<(60-4*j));

	}
}



void encrypt(uint64_t *Y15, uint64_t *Y14, uint64_t *Y13, uint64_t *Y12,uint64_t *Y11, uint64_t *Y10, uint64_t *Y9, uint64_t *Y8,uint64_t *Y7, uint64_t *Y6, uint64_t *Y5, uint64_t *Y4,uint64_t *Y3, uint64_t *Y2, uint64_t *Y1, uint64_t *Y0,uint64_t *key15,uint64_t *key14,uint64_t *key13,uint64_t *key12,uint64_t *key11,uint64_t *key10,uint64_t *key9,uint64_t *key8,uint64_t *key7,uint64_t *key6,uint64_t *key5,uint64_t *key4,uint64_t *key3,uint64_t *key2,uint64_t *key1,uint64_t *key0) {
  int i,j;
  	  	  *Y15 = *Y15 ^ *key15;
  	  	  *Y14 = *Y14 ^ *key14;
  	  	  *Y13 = *Y13 ^ *key13;
  	  	  *Y12 = *Y12 ^ *key12;
  	  	  *Y11 = *Y11 ^ *key11;
  	  	  *Y10 = *Y10 ^ *key10;
  	  	  *Y9 = *Y9 ^ *key9;
  	  	  *Y8 = *Y8 ^ *key8;
  	  	  *Y7 = *Y7 ^ *key7;
  	  	  *Y6 = *Y6 ^ *key6;
  	  	  *Y5 = *Y5 ^ *key5;
  	  	  *Y4 = *Y4 ^ *key4;
  	  	  *Y3 = *Y3 ^ *key3;
  	  	  *Y2 = *Y2 ^ *key2;
  	  	  *Y1 = *Y1 ^ *key1;
  	  	  *Y0 = *Y0 ^ *key0;

  for(i = 0; i < 8; i++){
  		for(j = 0; j < 4; j++){
		  AddConstants(Y15,Y14,Y11,Y10,Y7,Y6,Y3,Y2,i*4+j);
     	  SubCells(Y15);
		  SubCells(Y14);
		  SubCells(Y13);
		  SubCells(Y12);
		  SubCells(Y11);
		  SubCells(Y10);
		  SubCells(Y9);
		  SubCells(Y8);
		  SubCells(Y7);
		  SubCells(Y6);
		  SubCells(Y5);
		  SubCells(Y4);
		  SubCells(Y3);
		  SubCells(Y2);
		  SubCells(Y1);
		  SubCells(Y0);

		  ShiftRows(Y11,Y10,Y9,Y8,1);
		  ShiftRows(Y7,Y6,Y5,Y4,2);
		  ShiftRows(Y3,Y2,Y1,Y0,3);
		  MixColumn(Y15,Y14,Y13,Y12,Y11,Y10,Y9,Y8,Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0);

	}

	*Y15 = *Y15 ^ *key15;
  	*Y14 = *Y14 ^ *key14;
  	*Y13 = *Y13 ^ *key13;
  	*Y12 = *Y12 ^ *key12;
  	*Y11 = *Y11 ^ *key11;
  	*Y10 = *Y10 ^ *key10;
  	*Y9 = *Y9 ^ *key9;
  	*Y8 = *Y8 ^ *key8;
  	*Y7 = *Y7 ^ *key7;
  	*Y6 = *Y6 ^ *key6;
  	*Y5 = *Y5 ^ *key5;
  	*Y4 = *Y4 ^ *key4;
  	*Y3 = *Y3 ^ *key3;
  	*Y2 = *Y2 ^ *key2;
  	*Y1 = *Y1 ^ *key1;
  	*Y0 = *Y0 ^ *key0;

  }
}

int main(int arc, char **argv) {
  uint64_t plaintexts[16];
  uint64_t ciphertexts[16];
  uint64_t key[16];
  uint64_t ptmp[16];
  uint64_t ktmp[16];

    plaintexts[0] =  0x0000000000000000; key[0] =  0x0000000000000000;
    plaintexts[1] =  0x0123456789ABCDEF; key[1] = 0x0123456789ABCDEF;
    plaintexts[2] = 0x0000000000000000; key[2] =  0x0000000000000000;
    plaintexts[3] = 0x0123456789ABCDEF; key[3] = 0x0123456789ABCDEF;
    plaintexts[4] =  0x0000000000000000; key[4] =  0x0000000000000000;
    plaintexts[5] =  0x0123456789ABCDEF; key[5] = 0x0123456789ABCDEF;
    plaintexts[6] = 0x0000000000000000; key[6] =  0x0000000000000000;
    plaintexts[7] = 0x0123456789ABCDEF; key[7] = 0x0123456789ABCDEF;
    plaintexts[8] =  0x0000000000000000; key[8] =  0x0000000000000000;
    plaintexts[9] =  0x0123456789ABCDEF; key[9] = 0x0123456789ABCDEF;
    plaintexts[10] = 0x0000000000000000; key[10] =  0x0000000000000000;
    plaintexts[11] = 0x0123456789ABCDEF; key[11] = 0x0123456789ABCDEF;
    plaintexts[12] =  0x0000000000000000; key[12] =  0x0000000000000000;
    plaintexts[13] =  0x0123456789ABCDEF; key[13] = 0x0123456789ABCDEF;
    plaintexts[14] = 0x0000000000000000; key[14] =  0x0000000000000000;
    plaintexts[15] = 0x0123456789ABCDEF; key[15] = 0x0123456789ABCDEF;

    transpose(&ktmp[15], &ktmp[14], &ktmp[13], &ktmp[12], &ktmp[11], &ktmp[10],&ktmp[9],&ktmp[8],&ktmp[7],&ktmp[6],&ktmp[5],&ktmp[4],&ktmp[3],&ktmp[2],&ktmp[1],&ktmp[0], key[0],key[1],key[2],key[3],key[4],key[5],key[6],key[7],key[8],key[9],key[10],key[11],key[12],key[13],key[14],key[15]);

    transpose(&ptmp[15], &ptmp[14], &ptmp[13], &ptmp[12], &ptmp[11], &ptmp[10],&ptmp[9],&ptmp[8],&ptmp[7],&ptmp[6],&ptmp[5],&ptmp[4],&ptmp[3],&ptmp[2],&ptmp[1],&ptmp[0], plaintexts[0],plaintexts[1],plaintexts[2],plaintexts[3],plaintexts[4],plaintexts[5],plaintexts[6],plaintexts[7],plaintexts[8],plaintexts[9],plaintexts[10],plaintexts[11],plaintexts[12],plaintexts[13],plaintexts[14],plaintexts[15]);


    encrypt(&ptmp[15], &ptmp[14], &ptmp[13], &ptmp[12], &ptmp[11], &ptmp[10],&ptmp[9],&ptmp[8],&ptmp[7],&ptmp[6],&ptmp[5],&ptmp[4],&ptmp[3],&ptmp[2],&ptmp[1],&ptmp[0],&ktmp[15], &ktmp[14], &ktmp[13], &ktmp[12], &ktmp[11], &ktmp[10],&ktmp[9],&ktmp[8],&ktmp[7],&ktmp[6],&ktmp[5],&ktmp[4],&ktmp[3],&ktmp[2],&ktmp[1],&ktmp[0]);

    transpose(&ciphertexts[0],&ciphertexts[1],&ciphertexts[2],&ciphertexts[3],&ciphertexts[4],&ciphertexts[5],&ciphertexts[6],&ciphertexts[7],&ciphertexts[8],&ciphertexts[9],&ciphertexts[10],&ciphertexts[11],&ciphertexts[12],&ciphertexts[13],&ciphertexts[14],&ciphertexts[15], ptmp[15], ptmp[14], ptmp[13], ptmp[12], ptmp[11], ptmp[10], ptmp[9],  ptmp[8], ptmp[7], ptmp[6], ptmp[5], ptmp[4], ptmp[3], ptmp[2], ptmp[1], ptmp[0]);

    printf("\n    plaintext            key          ciphertext\n");
    for(int i=0;i<16;i++)
    {
    	printf("\n %016llx   %016llx   %016llx",plaintexts[i],key[i],ciphertexts[i]);
	}
    printf("\n");

  return 0;
}

